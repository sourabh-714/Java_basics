# Spanning Tree

- A Spanning tree is a subset graph, which has all the vertices covered with minimum possible number of edges.
	A spanning tree does not have cycles and it can't be disconnected.


-->weighted graph

Q. Move 1 vertex to 4 vertex, How many paths?

1-->2-->4 = 3
1-->3-->4 = 5
1-->2-->3-->4 = 5
1-->3-->2-->4 = 5

#Minimum Spanning Tree

- In a weighted graph, a minimum spanning tree is a spanning tree that has minimum weight than all other 
	spanning trees of the same graph.

- In real world, measured as distance, congestion, traffic load or any arbitary value

#Minimum Spanning Tree Algorithms:

1. Kruskal's Algorithm

- Kruskal's algorithm builds the spanning tree by adding edges one by one into a growing spanning tree.

Algorithm Steps:

- Sort the graph edges with respect to their weights.
- Start adding edges to the MST from the edge with the smallest weight until the edge of the largest weight
- Only add edges which doesn't form a cycle, edges which connect only disconnected components.

-Kruskal's Algorithm Implementation - Home Work

2. Prim's Algorithm

- Prim's Algorithm to find the minimum spanning tree. In prim's algorithm we grow the spanning tree from a 
	starting position. Unlike an edge in kruskal's we add vertex to the growing spanning tree in prim's

-Prim's Algorithm Implementation - Home Work

# Shortest Path Algorithm:

The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum 
of the edges weights is minimum.

1. Dijkstra's Algorithm

- find the shortest paths from the source vertex to all other vertices in the graph.

- Dijkstra's Algorithm Implementation - Home Work


2. Rotting Oranges (Minimum time required to rot all oranges)

0: empty cell
1: cells have fresh oranges
2: cells have rotten oranges

rotten orange at index[i, j], can rot other fresh oranges at 
indexes [i - 1, j], [i + 1, j], [i, j - 1], [i , j + 1], (up, down, left, right)

If it is impossible to rot every fresh orange then simply return -1.

Example:

0th time
2, 1, 0, 2, 1
1, 0, 1, 2, 1
1, 0, 0, 2, 1

1st time
2, 2, 0, 2, 2
2, 0, 2, 2, 2
1, 0, 0, 2, 2

2nd time
2, 2, 0, 2, 2
2, 0, 2, 2, 2
2, 0, 0, 2, 2

Output - 2

Another Example:

2, 1, 0, 2, 1
0, 0, 1, 2, 1
1, 0, 0, 2, 2

2, 2, 0, 2, 2
0, 0, 2, 2, 2
1, 0, 0, 2, 2

All Oranges can't be rotten.

3. Check Graph is connected or not - Home Work

4. Clone(deep copy) a Graph - Home Work

Before Cloning:

value of node 1

Address of node @15ab

After Cloning: (address / referenece must be changed)

value of node 1

Address of node @4578

5. Number of islands in a graph - Home Work

- connection b/w piece of land is only in vertical & horizontal directions and not in diagonal
- top, down, left, right

matrix:

1, 1, 1, 1
1, 0, 0, 1
1, 0, 0, 0

1- land
0- water 

1st example
1, 1, 1, 1
1, 0, 0, 1
1, 0, 0, 0

O/P: Islands = 1

2nd Example

1, 1, 0, 1
0, 0, 1, 0
0, 0, 0, 0

O/P: islands = 3













































