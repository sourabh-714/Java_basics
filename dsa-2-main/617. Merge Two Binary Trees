/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
 public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
    
     if(root1==null){
         return root2;
     }
     if(root2==null){
         return root1;
     }
     TreeNode temp=root1;
     temp.val=root1.val+root2.val;
     
     temp.left=mergeTrees(root1.left, root2.left);
     temp.right=mergeTrees(root1.right,root2.right);
     return temp;
 }
}



// public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        
//         if(root1==null && root2==null)
//         {
//             return null;
//         }
        
//         TreeNode temp=null;
//         if(root1==null ){
//             temp=root2;
//             temp.left=mergeTrees(null,root2.left);
//             temp.right=mergeTrees(null,root2.right); 
//         }
//         else if(root2==null){
//             temp=root1;
//             temp.left=mergeTrees(root1.left,null);
//             temp.right=mergeTrees(root1.right,null); 
//         }
//         else if(root1!=null && root2!=null){
//             temp=root1;
//             temp.val=root1.val+root2.val;
//             temp.left=mergeTrees(root1.left,root2.left);
//             temp.right=mergeTrees(root1.right,root2.right); 
//         }
        
        
      
//         return temp;
//     }








